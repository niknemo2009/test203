package com.mycompany.mavenproject2;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author BadCatss
 */
public class mainForm extends javax.swing.JFrame {

    /**
     * Creates new form mainForm
     */
    public static List<Parking> ListOfParking;
    public static int SelectingParkingIndex = 0;
    public static String ParkingGlobalSectorName;
    public static String PushedButtonText;
    public static RegistrationWindow Registration_window;
    public static JButton PushedButton;
    public  static String SelectParkingName;
    DefaultListModel model;
    List<JButton[][]> buttonSets;
    List<String[]> WidthsAndHeigths;
    char CurrentSectorGlobalName;
   public  static int CurrentSectorGlobalCounter;
    int ParkingSectorCount = 1;

    public mainForm() {
        initComponents();
        ListOfParking = new Vector<>(3);
        model = new DefaultListModel();
        buttonSets = new LinkedList<>();
        WidthsAndHeigths = new LinkedList<>();
        PreviousSector_Button.setVisible(false);
        NextSecror_Button.setVisible(false);
        CurrentSectorGlobalName = 'A';
        CurrentSectorGlobalCounter = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Welcome_Label = new javax.swing.JLabel();
        ParkingSize_Label = new java.awt.Label();
        SectorsCount_Label = new java.awt.Label();
        ParkingSize_TextField = new java.awt.TextField();
        SectorsCount_TextField = new java.awt.TextField();
        CreateParking_jButton = new javax.swing.JButton();
        CarPLaces_jPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ParkingLots_List = new javax.swing.JList<>();
        ParkingName_Label = new javax.swing.JLabel();
        ParkingName_TextF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        CurrentParkingInfo_TextArea = new javax.swing.JTextArea();
        CurrentParkingInfo_Label = new javax.swing.JLabel();
        ParkingLots_Label = new javax.swing.JLabel();
        PreviousSector_Button = new javax.swing.JButton();
        NextSecror_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Welcome_Label.setText("Welcome to the parking");

        ParkingSize_Label.setName("ParkingSize_Label"); // NOI18N
        ParkingSize_Label.setText(" Parking Size - nXn");

        SectorsCount_Label.setText("Sectors Count:");

        ParkingSize_TextField.setText("1");

        SectorsCount_TextField.setText("1");

        CreateParking_jButton.setText("Build New Parking");
        CreateParking_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateParking_jButtonActionPerformed(evt);
            }
        });

        CarPLaces_jPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        javax.swing.GroupLayout CarPLaces_jPanelLayout = new javax.swing.GroupLayout(CarPLaces_jPanel);
        CarPLaces_jPanel.setLayout(CarPLaces_jPanelLayout);
        CarPLaces_jPanelLayout.setHorizontalGroup(
            CarPLaces_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CarPLaces_jPanelLayout.setVerticalGroup(
            CarPLaces_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );

        ParkingLots_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ParkingLots_List.setDropMode(javax.swing.DropMode.ON);
        ParkingLots_List.setSelectedIndex(0);
        ParkingLots_List.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ParkingLots_ListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ParkingLots_List);

        ParkingName_Label.setText("Parking name:");

        ParkingName_TextF.setText("parking1");

        CurrentParkingInfo_TextArea.setColumns(20);
        CurrentParkingInfo_TextArea.setRows(5);
        CurrentParkingInfo_TextArea.setText("Correct   width size:1-5\nCorrect  heigth size:1-9\nCorrect  parking name size:4-15\n");
        jScrollPane2.setViewportView(CurrentParkingInfo_TextArea);

        CurrentParkingInfo_Label.setText("Parking info:");

        ParkingLots_Label.setText("already built parking lots:");

        PreviousSector_Button.setText("<< PreviousSector");
        PreviousSector_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousSector_ButtonActionPerformed(evt);
            }
        });

        NextSecror_Button.setText("NextSector>>");
        NextSecror_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextSecror_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(281, Short.MAX_VALUE)
                .addComponent(Welcome_Label)
                .addGap(236, 236, 236))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateParking_jButton)
                    .addComponent(ParkingName_Label)
                    .addComponent(ParkingName_TextF, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ParkingSize_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SectorsCount_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SectorsCount_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                            .addComponent(ParkingSize_TextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ParkingLots_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addComponent(CarPLaces_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(CurrentParkingInfo_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(PreviousSector_Button)
                        .addGap(87, 87, 87)
                        .addComponent(NextSecror_Button)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ParkingSize_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ParkingSize_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SectorsCount_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SectorsCount_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ParkingName_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ParkingName_TextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CreateParking_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(ParkingLots_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Welcome_Label)
                        .addGap(8, 8, 8)
                        .addComponent(CarPLaces_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CurrentParkingInfo_Label)
                            .addComponent(PreviousSector_Button)
                            .addComponent(NextSecror_Button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
        );

        ParkingSize_Label.getAccessibleContext().setAccessibleName("ParkingSize_Label");
        SectorsCount_Label.getAccessibleContext().setAccessibleName("SectorsCount_Label");
        ParkingSize_TextField.getAccessibleContext().setAccessibleName("");
        SectorsCount_TextField.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
ActionListener ParkingCarListener = new ActionListener() {
        // Используем переопределение
        @Override
        // Добавляем событие нажатия на кнопку e — название события
        public void actionPerformed(ActionEvent e) {
            PushedButtonText = ((JButton) e.getSource()).getText();
            PushedButton = (JButton) e.getSource();
            if (((JButton) e.getSource()).getForeground() == Color.GREEN) {
                Registration_window = new RegistrationWindow();

                Registration_window.setVisible(true);

            } else {
                CarPlaceReport placeReport = new CarPlaceReport();
                int DequeNumber = (Integer) RegistrationWindow.ParkedCars.get(PushedButtonText).values().toArray()[0];
                var infoSet = ListOfParking.get(ParkingLots_List.getSelectedIndex()).TerminalSession().GetCarData(DequeNumber);
                placeReport.Report_TextArea.setText(infoSet.Sector.toString());
                placeReport.Report_TextArea.append("\nSector number: " + infoSet.SectorNumber + "\nCar name:" + infoSet.car.CarName + "\nCar size: "
                        + infoSet.car.CarSize + "\nCost for time period: " + infoSet.cost + "\nTime period: start -  " + infoSet.timeInterval.getParkingStartD().toString()
                        + " stop - " + infoSet.timeInterval.getParkingStopD().toString());
                placeReport.setVisible(true);
            }

        }
    };


    private void CreateParking_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateParking_jButtonActionPerformed
        try {
            String parkingWidth = ParkingSize_TextField.getText();
            String parkingHeigth = parkingWidth;
            String SectorsCount = SectorsCount_TextField.getText();
            String parkingName = ParkingName_TextF.getText();
            SelectParkingName = parkingName;

            if (parkingWidth != null && SectorsCount != null && parkingName != "" && parkingName != null) {

                if (parkingWidth.matches("[1-5]{1,1}") && parkingName.matches("[a-zA-Z1-9]{4,15}") && Integer.parseInt(SectorsCount) < 26) {
                    if (!model.contains(parkingName)) {
                        WidthsAndHeigths.add(new String[2]);
                        WidthsAndHeigths.get(WidthsAndHeigths.size() - 1)[0] = parkingWidth;
                        WidthsAndHeigths.get(WidthsAndHeigths.size() - 1)[1] = parkingHeigth;
                        ParkingSectorCount = Integer.parseInt(SectorsCount);
                        if (ParkingSectorCount > 1) {
                            NextSecror_Button.setVisible(true);
                        }
                        RedrawParking(true);

                        ListOfParking.add(ListOfParking.size(), new Parking(ParkingSectorCount, Integer.parseInt(parkingHeigth)));
                        model.add(model.size(), parkingName);

                        ParkingLots_List.setModel(model);
                        ParkingLots_List.setSelectedIndex(model.size() - 1);
                    } else {
                        CurrentParkingInfo_TextArea.append("\nParking already built");
                    }
                } else {
                    CurrentParkingInfo_TextArea.append("\nIncorrect input data");
                }
            } else {
                CurrentParkingInfo_TextArea.append("\nOne of the parameters is not set");
            }

        } catch (Exception ex) {
            System.out.println("something wrong");
        }
    }//GEN-LAST:event_CreateParking_jButtonActionPerformed

    private void ParkingLots_ListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ParkingLots_ListMouseClicked
        // CurrentParkingInfo_TextArea.append("\n"+ ParkingLots_List.getSelectedIndex());
           SelectParkingName = ParkingLots_List.getSelectedValue();
        RedrawParking(false);
     
    }//GEN-LAST:event_ParkingLots_ListMouseClicked

    private void NextSecror_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextSecror_ButtonActionPerformed
        if (CurrentSectorGlobalCounter < ListOfParking.get(ParkingLots_List.getSelectedIndex()).ParkObj_sectorCount) {
            CurrentSectorGlobalCounter++;
            CurrentSectorGlobalName++;
        } else {
            NextSecror_Button.setVisible(false);
        }

        PreviousSector_Button.setVisible(true);
        RedrawParking(false);

    }//GEN-LAST:event_NextSecror_ButtonActionPerformed

    private void PreviousSector_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousSector_ButtonActionPerformed
        if (CurrentSectorGlobalCounter > 0) {
            CurrentSectorGlobalCounter--;
            CurrentSectorGlobalName--;
        }
        if (CurrentSectorGlobalCounter == 0) {
            PreviousSector_Button.setVisible(false);
        }
        NextSecror_Button.setVisible(true);
        RedrawParking(false);
    }//GEN-LAST:event_PreviousSector_ButtonActionPerformed

    private void RedrawParking(Boolean flag) {
        
        int parkingHeigth;
        int parkingWidth;
       
        CarPLaces_jPanel.removeAll();
        CarPLaces_jPanel.repaint();
        if (flag) {

            parkingWidth = Integer.parseInt(ParkingSize_TextField.getText());
            parkingHeigth = parkingWidth;
            ParkingGlobalSectorName = ParkingName_TextF.getText();
            buttonSets.add(new JButton[parkingHeigth*ParkingSectorCount][parkingWidth*ParkingSectorCount]);
        } else {
            SelectingParkingIndex = ParkingLots_List.getSelectedIndex();
            parkingHeigth = Integer.parseInt(WidthsAndHeigths.get(ParkingLots_List.getSelectedIndex())[1]);
            parkingWidth = Integer.parseInt(WidthsAndHeigths.get(ParkingLots_List.getSelectedIndex())[0]);
            ParkingGlobalSectorName = ParkingLots_List.getSelectedValue();
            if (ListOfParking.get(ParkingLots_List.getSelectedIndex()).ParkObj_sectorCount == 1) {
                NextSecror_Button.setVisible(false);
                PreviousSector_Button.setVisible(false);
            } else {
                NextSecror_Button.setVisible(true);

            }

        }
//        buttonSets.clear();
        int undex;
        if (ParkingLots_List.getModel().getSize()!=0) {
            undex = ParkingLots_List.getSelectedIndex();
        } else {
            undex=buttonSets.size() - 1;
        }
 int placeNumber = (parkingWidth*parkingWidth*CurrentSectorGlobalCounter);
        for (int i = 0; i < parkingHeigth; i++) {
            for (int j = 0; j < parkingWidth; j++) {
                buttonSets.get(undex)[i][j] = new JButton(placeNumber + "");
                placeNumber++;
                CarPLaces_jPanel.add(buttonSets.get(undex)[i][j]);
                buttonSets.get(undex)[i][j].setVisible(true);
                buttonSets.get(undex)[i][j].setSize(50, 50);
                buttonSets.get(undex)[i][j].setForeground(Color.GREEN);
                buttonSets.get(undex)[i][j].setLocation(buttonSets.get(undex)[i][j].getWidth() * i, buttonSets.get(undex)[i][j].getHeight() * j);
                buttonSets.get(undex)[i][j].addActionListener(ParkingCarListener);

            }
        }
        if (ListOfParking.size() > 0) {
            var cars = ListOfParking.get(ParkingLots_List.getSelectedIndex()).TerminalSession().GetAllCars();
            
            for (ParkingSet car : cars) {
                if (car.Sector == CurrentSectorGlobalName && car.parkingName==SelectParkingName) {
                     int tmpCoefficent;
                     if(CurrentSectorGlobalCounter==0)
                     {
                        tmpCoefficent =CurrentSectorGlobalCounter+1;
                     }
                     else{
                          tmpCoefficent =CurrentSectorGlobalCounter;
                     }
                    for (int i = 0; i < parkingHeigth*(tmpCoefficent); i++) {
                        for (int j = 0; j < parkingWidth*(tmpCoefficent); j++) {
                            if (car.SectorNumber == Integer.parseInt(buttonSets.get(undex)[i][j].getText())) {
                                buttonSets.get(undex)[i][j].setForeground(Color.RED);
                            }
                        }
                    }

                }
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainForm().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CarPLaces_jPanel;
    private javax.swing.JButton CreateParking_jButton;
    private javax.swing.JLabel CurrentParkingInfo_Label;
    private javax.swing.JTextArea CurrentParkingInfo_TextArea;
    private javax.swing.JButton NextSecror_Button;
    private javax.swing.JLabel ParkingLots_Label;
    private javax.swing.JList<String> ParkingLots_List;
    private javax.swing.JLabel ParkingName_Label;
    private javax.swing.JTextField ParkingName_TextF;
    private java.awt.Label ParkingSize_Label;
    private java.awt.TextField ParkingSize_TextField;
    private javax.swing.JButton PreviousSector_Button;
    private java.awt.Label SectorsCount_Label;
    private java.awt.TextField SectorsCount_TextField;
    private javax.swing.JLabel Welcome_Label;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
